//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2009
//  @ File Name : WsCrabController.h
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#if !defined(_WSCRABCONTROLLER_H)
#define _WSCRABCONTROLLER_H

#include <stdio.h>

#include  "WsTunableController.h"

class WsCalibration;
class WsSc;
class WsPid;
class WsPot;

#define CRAB_ANGLE_MAX  180
#define CRAB_ANGLE_MIN  -180

/**
* This controls a single crab controller, which is comprised of speed controllers, potentiometer, and PID controller
*/
class WsCrabController : public WsTunableController
{
public:
    WsCrabController(WsSc* p_sc, WsPot* p_pot);
    WsCrabController(WsSc* p_scL, WsSc* p_scR, WsPot* p_pot);
    virtual ~WsCrabController();
    void assignPid(WsPid* p_pid);
    void assignAlignPid(WsPid* p_pid);
    void setOutputSpeed(float speed);
    void setAngle(float angle);
    virtual WsPid* getPid(void);
    virtual void runStepTest(float input, UINT32& currentVal, float& speed);
    virtual void endStepTest(void);

    void useAlignPid(bool use);

protected:
    UINT32 convertDegToPot(float angle);

    WsPid* ap_pid;              /*!< The PID controller that will control the output speed*/
    WsPid* ap_alignPid;         /*!< The PID controller that will control the output speed*/
    WsCalibration* ap_calib;    /*!< The calibration data for the crab controller*/
    WsPot* ap_crabPot;          /*!< The potentiometer*/
    WsSc* ap_crabScLeft;        /*!< The speed controller on the left side of a two speed controller single chain system */
    WsSc* ap_crabScRight;       /*!< The speed controller on the right side of a two speed controller single chain system */
    float a_outputSpeedPrev;    /*!< The previous output speed to the crab motor*/


    bool a_useAlignPid;
};

#endif  //_WSCRABCONTROLLER_H
