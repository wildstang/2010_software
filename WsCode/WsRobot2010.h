//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : WsRobot2009.h
//  @ Date : 1/31/2009
//  @ Author : 
//
//


#if !defined(_WSROBOT2010_H)
#define _WSROBOT2010_H

#include <stdio.h>
#include "IterativeRobot.h"
#define TEST_VEL_PID 0

class DriverStationLCD;
class Joystick;
class Gamepad;
class DigitalInput;
class DigitalOutput;
class WsControllerAxis;
class WsControllerPolarStick;
class WsControllerButton;
class SpeedController;
class Servo;
class Relay;
class Solenoid;
class Compressor;
class AnalogChannel;
class WsEncoder;
class WsSc;
class WsRelay;
class WsSolenoid;
class WsDoubleSolenoid;
class WsMotorManager;
class WsPot;
class WsPid;
class WsDashboard;
class WsLogger;
class WsCalibration;
class WsControlMethodCrab;
class WsCrabController;
class WsDriveBaseCrabSingle;
class WsDsAnalog;
class WsAutonomousMgr;
class WsDriverStationLED;
class WsShmCamera;
class WsPidTuner;
class WsAccumulator;
class WsAppendageControl;
class WsKicker;
class WsHanger;
class WsTowerAlign;
class WsTowerFingers;

class WsRobot2010 : public IterativeRobot
{
public:
    void RobotInit(void );
    void DisabledInit(void );
    void AutonomousInit(void );
    void TeleopInit(void );
    void DisabledPeriodic(void );
    void AutonomousPeriodic(void );
    void TeleopPeriodic(void );
    void AutonomousContinuous(void );
    void TeleopContinuous(void );
    void DisabledContinuous(void );
protected:

    /********************
     * Inputs
     ********************/

    /***** Joysticks & Gamepads *****/
    Gamepad* ap_driveGamepad;
    Gamepad* ap_appendageGamepad;
    Gamepad* ap_pidTunerGamepad;
    Gamepad* ap_oiGamepad;

    /***** Individual axis & sticks *****/
    WsControllerAxis* ap_driveAxisX;
    WsControllerAxis* ap_driveAxisY;
    WsControllerAxis* ap_crabAxisX;
    WsControllerAxis* ap_crabAxisY;
    WsControllerPolarStick* ap_driveStick;
    WsControllerPolarStick* ap_crabStick;

    /***** Buttons *****/
    /* Drive */
    WsControllerButton* ap_turboButton;
    WsControllerButton* ap_crabReorientButton;
    WsControllerButton* ap_crabDisableButton;
    WsControllerButton* ap_crabManualButton;
    WsControllerButton* ap_crabManualSlowButton;
#if TEST_VEL_PID
    WsControllerButton* ap_tempVelocityPidTestButton;
#endif

    /* Appendages */
    WsControllerButton* ap_accumInButton;
    WsControllerButton* ap_accumOutButton;
    WsControllerButton* ap_accumBarRaiseButton;

    WsControllerButton* ap_prepKickButton;
    WsControllerButton* ap_stowKickerButton;
    WsControllerButton* ap_kickHighButton;
    WsControllerButton* ap_kickLowButton;
    WsControllerButton* ap_kickBabyButton;
    WsControllerButton* ap_kickBabyHighButton;
    WsControllerButton* ap_kickRangeNearButton;
    WsControllerButton* ap_kickRangeFarButton;
    WsControllerButton* ap_releaseArmsButton;
    WsControllerButton* ap_releaseTowerAlignButton;
    WsControllerButton* ap_toggleTowerFingersButton;
    WsControllerButton* ap_winchSlowSafetyButton;
    WsControllerButton* ap_winchFullSafetyButton;
    WsControllerAxis*   ap_winchDriveAxis;

    WsControllerButton* ap_manualLoftButton;

    WsControllerButton* ap_cameraUpButton;

    /* OI */
    WsControllerButton* ap_pneumaticsDisable;
    WsControllerButton* ap_swDisable;

    /* Autonomous */
    WsControllerAxis* ap_autoProgSelector;
    WsControllerAxis* ap_autoPositionSelector;
    WsControllerButton* ap_autoLockinSwitch;
    WsControllerAxis* ap_autoDelaySelector;

    /* Other */
    WsControllerButton* ap_calibrateEnableButton;
    WsControllerButton* ap_calibrateCrabPotLeftButton;
    WsControllerButton* ap_calibrateCrabPotMidButton;
    WsControllerButton* ap_calibrateCrabPotRightButton;
    WsControllerButton* ap_tunePidButton;
    WsControllerButton* ap_pidTuneParamSelectNextButton;
    WsControllerButton* ap_pidTuneParamSelectPrevButton;
    WsControllerButton* ap_pidTuneParamIncrButton;
    WsControllerButton* ap_pidTuneParamDecrButton;
    WsControllerButton* ap_pidTuneRunStepTestButton;
    WsControllerButton* ap_pidTuneRunPidButton;
    WsControllerAxis* ap_pidTuneControlAxis;

    WsControllerButton* ap_resetEncodersButton;

    /***** Input Control Objects *****/
    WsControlMethodCrab* ap_controlMethodCrab;
    WsAppendageControl* ap_appendageController;

    /********************
     * Sensors
     ********************/
    WsPot* ap_crabPot;
    WsShmCamera* ap_camera;
    AnalogChannel* ap_analogPressureSensor;

    WsEncoder* ap_encoderFL;
    WsEncoder* ap_encoderBR;

    DigitalInput* ap_armLimit;
    DigitalInput* ap_ballPossessedLimit;

    /********************
     * PID Controllers
     ********************/
    WsPid* ap_crabPID;
    WsPid* ap_driveVelocityPID;
    WsPid* ap_crabAlignPID;

    /********************
     * Outputs
     ********************/

    /***** Speed Controllers *****/
    WsSc* ap_scDriveFL;
    WsSc* ap_scDriveFR;
    WsSc* ap_scDriveBL;
    WsSc* ap_scDriveBR;
    WsSc* ap_scCrabL;
    WsSc* ap_scCrabR;
    WsSc* ap_scAccumulator;
    //WsSc* ap_scWinch;

    /***** Servos *****/
    Servo* ap_servTowerAlign;
    Servo* ap_servCamera;

    /***** Solenoids *****/
    WsSolenoid* ap_solAccumBar;
    WsSolenoid* ap_solKickerRange;
    WsSolenoid* ap_solKickerLoft;
    WsSolenoid* ap_solKickerTension;
    WsSolenoid* ap_solKickerLatch;
    //WsSolenoid* ap_solWinchBrake;
    //WsSolenoid* ap_solArmDeploy;
    //WsDoubleSolenoid* ap_dsolTowerFingers;

    /***** Relays *****/

    /***** Compressor *****/
    Compressor* ap_compressor;

    DigitalOutput* ap_ballPossessLED;

    /***** Robot Output Objects *****/
    WsCrabController* ap_crabController;
    WsDriveBaseCrabSingle* ap_driveBase;
    WsKicker* ap_kicker;
    WsAccumulator* ap_accumulator;

    /********************
     * Miscellenaeous
     ********************/
    DriverStationLCD *ap_dsLcd;
    WsDriverStationLED *ap_dsLockInLed;
    WsAutonomousMgr* ap_autonMgr;
    WsMotorManager* ap_mmgrDriveBase;
    WsMotorManager* ap_mmgrRobot;
    WsDashboard* ap_dashboard;             // FIXME - need to delete?????
    WsLogger* ap_logger;                   // FIXME - need to delete?????
    WsCalibration* ap_calib;               // FIXME - need to delete?????
    WsPidTuner *ap_crabPidTuner;

    int a_continuousLoopCounter;
    bool a_calibrationMode;
    bool a_crabCalibrationOn;

    bool processCalibration(void );
    bool tuneCrabPid(void);
private:
    ~WsRobot2010();
    void dashboardDisplayInputs(void);
    void dashboardDisplayCrab(void);
    void dashboardDisplayOutput(void);
    void dashboardDisplayAppendageInput(void);
    void dashboardDisplayAppendageOutput(void);
    void dashboardDisplaySensors(void);
    void dashboardDisplayVision(void);
    void dashboardDisplayGeneral(void);
    void dashboardDisplayPidTuning(void);
    void dashboardDisplayAutonomous(void);
    void runOiTest(void);
    void printLcdRegularData(void);
};

START_ROBOT_CLASS(WsRobot2010);

#endif  //_WSROBOT2010_H
