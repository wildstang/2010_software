//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2010
//  @ File Name : WsControlMethodCrab.cpp
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#include "WsControlMethodCrab.h"
#include "WsDriveVector.h"
#include "WsControllerPolarStick.h"
#include "WsControllerButton.h"
#include "WsDashboard.h"

/**
* Constructs a WsControlMethodCrab
*/
WsControlMethodCrab::WsControlMethodCrab() :
    WsControlMethodArcade()
{
    ap_crabStick = NULL;
    ap_crabDisableButton = NULL;
    ap_crabManualButton = NULL;
    ap_crabManualSlowButton = NULL;
    ap_crabReorientButton = NULL;
    a_crab_stick_radius_thresh = 0.5;
    //a_crab_manu_scale = 0.5;
    a_crab_manu_scale = 1;
    a_crab_manu_slow_scale = .3;
    a_crabSide = CRAB_SIDE_NONE;
}

/**
* Destructs a WsControlMethodCrab
*/
WsControlMethodCrab::~WsControlMethodCrab()
{
}

/**
* Assigns the crab stick to the local member
*/
void WsControlMethodCrab::assignCrabStick(WsControllerPolarStick* p_stick)
{
    ap_crabStick = p_stick;
}

/**
* Assigns the crab disable button to the local member
*/
void WsControlMethodCrab::assignCrabDisableButton(WsControllerButton* p_disable)
{
    ap_crabDisableButton = p_disable;
}

/**
* Assigns the manual crab button to the local member
*/
void WsControlMethodCrab::assignCrabManualButton(WsControllerButton* p_manual)
{
    ap_crabManualButton = p_manual;
}

void WsControlMethodCrab::assignCrabManualSlowButton(WsControllerButton* p_manualSlow)
{
    ap_crabManualSlowButton = p_manualSlow;
}

/**
* Assigns the crab reorient button to the local member
*/
void WsControlMethodCrab::assignCrabReorientButton(WsControllerButton* p_reorient)
{
    ap_crabReorientButton = p_reorient;
}

/**
* Calls the WsControlMethodArcade's method to get the drive vector
* @returns the drive vector
*/
WsDriveVector WsControlMethodCrab::getDriveVector(void )
{
    return WsControlMethodArcade::getDriveVector();
}

/**
* Reads the crab disable button and determines the crab enable state
* @returns the crab disable state
*/
bool WsControlMethodCrab::getCrabEnableState(void )
{
    bool state = false;

    if (ap_crabDisableButton != NULL)
    {
        state = !ap_crabDisableButton->getState();
    }

    return state;
}

/**
* Reads the crab stick and returns an angle (in degrees) between -180 and 180.
* The angle is determined from the polar angle of the crab stick.
* Additional processing is done to handle the case where the stick moves over the end of travel (180 deg)
* to prevent wrap around that would cause crab bouncing.
* @returns The desired crab angle (in degrees)
*/
float WsControlMethodCrab::getCrabWheelAngle(void )
{
    float wheelAngle = 0;

    if (ap_crabStick != NULL)
    {
        if (ap_crabStick->GetRadius() >= a_crab_stick_radius_thresh)
        {
            wheelAngle = ap_crabStick->GetAngle();
        }

        /* prevent bouncing when wrapping-around back */
        if ((wheelAngle <= -135) && (a_crabSide == CRAB_SIDE_RIGHT))
        {
            wheelAngle = 180;
        }
        else if ((wheelAngle >= 135) && (a_crabSide == CRAB_SIDE_LEFT))
        {
            wheelAngle = -180;
        }

        if (wheelAngle < 0)
        {
            a_crabSide = CRAB_SIDE_LEFT;
        }
        else if (wheelAngle > 0)
        {
            a_crabSide = CRAB_SIDE_RIGHT;
        }
        else
        {
            a_crabSide = CRAB_SIDE_NONE;
        }

        if (ap_crabReorientButton != NULL)
        {
            if (ap_crabReorientButton->getState() == true)
            {
                wheelAngle -= 90;
            }
        }
    }

    return wheelAngle;
}

/**
* If the crab is in manual mode, calculate a manual speed proportional to the X axis of the crab stick
* @returns The desired manual speed (0 if manual mode is off)
*/
float WsControlMethodCrab::getCrabManualSpeed(void )
{
    float speed = 0;
    float stickX = 0;

    if (ap_crabStick != NULL)
    {
      stickX = ap_crabStick->GetX();

      if (ap_crabManualButton != NULL)
      {
        if (ap_crabManualButton->getState() == true)
        {
          speed = stickX * a_crab_manu_scale;
        }
      }

      if (ap_crabManualSlowButton != NULL)
      {
        if (ap_crabManualSlowButton->getState() == true)
        {
          speed = stickX * a_crab_manu_slow_scale;
        }
      }
    }

    return speed;
}

