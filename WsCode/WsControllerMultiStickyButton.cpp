//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2010
//  @ File Name : WsControllerMultiStickyButton.cpp
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#include "WsControllerMultiStickyButton.h"
#include "Joystick.h"
#include "WsControllerButton.h"

/**
* Constructs a WsControllerMultiStickyButton
* @param p_js The joystick that the on and off buttons reside
* @param onButton The button number of the on button
* @param offButton The button number of the on button
*/
WsControllerMultiStickyButton::WsControllerMultiStickyButton(Joystick* p_js, UINT32 onButton, UINT32 offButton)
: WsControllerButton(p_js, onButton)
{
    a_stickyState = false;
    a_offButtonNum = offButton;
    a_offDirection = Gamepad::kCenter;
}

/**
* Constructs a WsControllerMultiStickyButton
* @param p_gamepad The gamepad that the on and off buttons reside
* @param onButton The button number of the on button
* @param offButton The button number of the on button
*/
WsControllerMultiStickyButton::WsControllerMultiStickyButton(Gamepad* p_gamepad, UINT32 onButton, UINT32 offButton)
: WsControllerButton(p_gamepad, onButton)
{
    a_stickyState = false;
    a_offButtonNum = offButton;
    a_offDirection = Gamepad::kCenter;
}

/**
* Constructs a WsControllerMultiStickyButton
* @param p_gamepad The gamepad that the on and off DPad buttons reside
* @param onButton The DPad direction of the on button
* @param offButton The DPad direction of the on button
*/
WsControllerMultiStickyButton::WsControllerMultiStickyButton(Gamepad* p_gamepad,
                                                             Gamepad::DPadDirection onDirection,
                                                             Gamepad::DPadDirection offDirection)
: WsControllerButton(p_gamepad, onDirection)
{
    a_stickyState = false;
    a_offButtonNum = 0;
    a_offDirection = offDirection;
}

/**
* Destructs a WsControllerMultiStickyButton
*/
WsControllerMultiStickyButton::~WsControllerMultiStickyButton()
{
}

void WsControllerMultiStickyButton::resetState(void)
{
    a_stickyState = false;
}

/**
* Gets the state of the virtual button.  This is done by reading the values of the on and
* off buttons and setting a_stickyState accordingly.
* @returns The sticky state of the virtual button.
*/
bool WsControllerMultiStickyButton::getState(void )
{
    if (WsControllerButton::getState() == true)
    {
        // onButton is pressed
        a_stickyState = true;
    }
    else if (WsControllerButton::getButtonState(a_offButtonNum, 0, a_offDirection) == true)
    {
        // offButton is pressed
        a_stickyState = false;
    }

    return a_stickyState;
}

