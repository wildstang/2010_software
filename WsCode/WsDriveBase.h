//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2009
//  @ File Name : WsDriveBase.h
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#if !defined(_WSDRIVEBASE_H)
#define _WSDRIVEBASE_H

#include <stdio.h>
#include "WsEncoder.h"

class WsSc;
class WsDriveVector;

class WsDriveBase
{
public:

    typedef enum
    {
        ENC_LOC_LF,
        ENC_LOC_LB,
        ENC_LOC_RF,
        ENC_LOC_RB,
        ENC_LOC_L,
        ENC_LOC_R,
    } EncoderLocationT;

    WsDriveBase()
    {
        ap_scLF = NULL;
        ap_scLB = NULL;
        ap_scRF = NULL;
        ap_scRB = NULL;

        ap_encLF = NULL;
        ap_encRF = NULL;
        ap_encLB = NULL;
        ap_encRB = NULL;
    };

    void assignEncoder(EncoderLocationT encLoc, WsEncoder* enc)
    {
        switch(encLoc)
        {
            case ENC_LOC_LF:
                ap_encLF = enc;
                break;
            case ENC_LOC_L:
            case ENC_LOC_LB:
                ap_encLB = enc;
                break;
            case ENC_LOC_RF:
                ap_encRF = enc;
                break;
            case ENC_LOC_R:
            case ENC_LOC_RB:
                ap_encRB = enc;
                break;
            default:
                break;
        }
    };

    INT32 getEncoderValue(EncoderLocationT encLoc)
    {
        INT32 value = 0;
        WsEncoder* enc = NULL;

        switch(encLoc)
        {
            case ENC_LOC_LF:
                enc = ap_encLF;
                break;
            case ENC_LOC_L:
            case ENC_LOC_LB:
                enc = ap_encLB;
                break;
            case ENC_LOC_RF:
                enc = ap_encRF;
                break;
            case ENC_LOC_R:
            case ENC_LOC_RB:
                enc = ap_encRB;
                break;
            default:
                break;
        }

        if(enc != NULL)
        {
            value = enc->getAbsCount();
        }

        return value;
    };

    WsEncoder* getEncoder(EncoderLocationT encLoc)
    {
        WsEncoder* enc = NULL;

        switch(encLoc)
        {
            case ENC_LOC_LF:
                enc = ap_encLF;
                break;
            case ENC_LOC_L:
            case ENC_LOC_LB:
                enc = ap_encLB;
                break;
            case ENC_LOC_RF:
                enc = ap_encRF;
                break;
            case ENC_LOC_R:
            case ENC_LOC_RB:
                enc = ap_encRB;
                break;
            default:
                break;
        }

        return enc;
    };

    virtual void setVector(WsDriveVector* v) = 0;

protected:
    WsSc* ap_scLF;
    WsSc* ap_scLB;
    WsSc* ap_scRF;
    WsSc* ap_scRB;

    WsEncoder* ap_encLF;
    WsEncoder* ap_encRF;
    WsEncoder* ap_encLB;
    WsEncoder* ap_encRB;
};

#endif  //_WSDRIVEBASE_H
