//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsAutoSixStepBase.h
//  @ Date : 3/12/2009
//  @ Author : 
//
//


#if !defined(_WSAUTONSTEPBASE_H)
#define _WSAUTONSTEPBASE_H

#include <stdio.h>
#include "WsAutoProgramBase.h"

#include "WsDriveVector.h"
#include "WsDriveBase.h"
#include "WsKicker.h"

class Timer;
class Dashboard;
class WsKickerRange;
class WsKickerLoft;
class WsAccumulator;


/**
* The base class for autonomous programs that are step based
*/

class WsAutoNStepBase : public WsAutoProgramBase
{
public:

    static const UINT8 MAX_STEPS = 20;  /*!< The maximum number of steps allowed */
    static const UINT8 DEFAULT_NUM_KICKS = 100; // MORE KICKS THAN WE WILL EVER DO

    typedef enum
    {
        AUTO_STATE_INIT,           /**< Initialization state */
        AUTO_STATE_INIT_DELAY,     /**< Delay between initialization and running commands  */
        AUTO_STATE_RUN_CMD,        /**< Run commands until there are none left */
        AUTO_STATE_HANDLE_ENC_TO,  /**< Handles when the overall encoder count is reached */
        AUTO_STATE_DONE            /**< Done state  */
    } WsAutoNStepStateT;

    typedef enum
    {
        AUTO_KICKER_CMD_NONE = 0,     /**< No kicker command */
        AUTO_KICKER_CMD_STOW,         /**< Move the kicker to the stow state */
        AUTO_KICKER_CMD_LOAD,         /**< Load the kicker to prepare to shoot */
        AUTO_KICKER_CMD_KICK,         /**< Kick and reload (if necessary) the kicker */
        AUTO_KICKER_CMD_BABY_KICK_LOW,    /**< Baby Kick and reset the kicker */
        AUTO_KICKER_CMD_BABY_KICK_HIGH,    /**< Baby Kick and reset the kicker */
        AUTO_KICKER_CMD_SET_RANGE,    /**< Set the range of the kicker */
    } WsAutoKickerCmd;

    typedef enum
    {
        AUTO_DRIVE_TIME,
        AUTO_DRIVE_ENCODER,
        AUTO_DRIVE_UNTIL_PRESS,
        AUTO_DRIVE_DIST_PID,
    } WsAutoDriveTypeT;

    typedef struct
    {
        WsAutoDriveTypeT driveType;              /**< The command type */
        bool crabEnable;              /**< Flag to enable crab */
        float crabAngle;             /**< The desired crab angle */
        WsDriveVector driveVector;   /**< The desired drive vector */
        double driveTimeout;         /**< How long to drive.  In seconds (i.e. 1.0, 0.5) */
        INT32 driveEncoderDist;      /**< How far to drive by encoder.  If set to 0, we will drive by time */
        WsDriveBase::EncoderLocationT driveEncoderLoc;      /**< Which encoder to use */
        WsPid* distancePid;      /**< The PID object to use to drive for a distance */
        WsAccumulator::WsAccumStateT accumState;  /**< How the accumulator should be run */
        WsAutoKickerCmd kickerCmd;   /**< What kicker command to run*/
        WsKickerRange::WsKickerRangeT kickerRange; /**< The range to use in the kicker command*/
        WsKickerLoft::WsKickerLoftT kickerLoft;    /**< The loft to use in the kicker command*/
    } WsAutoNStepCmdT;

    static float convertDelay(StartDelayT delay);

    WsAutoNStepBase();
    virtual ~WsAutoNStepBase();
    virtual bool run(void );
    virtual void addStep(const WsAutoNStepCmdT& cmd);
    virtual void initParams(void);
protected:
    WsAutoNStepStateT a_progState;         /*!< The internal state of the program */

    INT32 a_overallEncTimeout;
    WsDriveBase::EncoderLocationT a_overallEncLoc;

    // Attributes for init

    // Attributes for init delay
    double a_initDelay;                     /*!< The amount of time in seconds that the program should wait in the INIT_DELAY state */
    WsAccumulator::WsAccumStateT a_initAccumState;  /*!< The accumulator state to initialize to */

    WsAutoNStepCmdT a_encoderToRevCmd;

    WsAutoNStepCmdT a_cmdList[MAX_STEPS];   /*!< A list of size MAX_STEPS of WsAutoNStepCmdT commands to run */

    UINT8 a_expectedNumKicks;
    UINT8 a_numKicksPerformed;

    // Attributes for done
    float a_doneCrabAngle;                  /*!< The crab angle to move to while in the done state */
    WsAccumulator::WsAccumStateT a_doneAccumState; /*!< The accumulator state to be in while in the done state */

    UINT8 a_cmdIdx;                         /*!< The command index used during setup */
    UINT8 a_currentCmd;                     /*!< The current command that the program is running */
};

#endif  //_WSAUTONSTEPBASE_H
