//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsAccumulator.h
//  @ Date : 1/30/2010
//  @ Author : 
//
//


#if !defined(_WSACCUMULATOR_H)
#define _WSACCUMULATOR_H

class WsSc;
class WsSolenoid;
class DigitalInput;

/**
* Handles control a ball accumulator.
*/
class WsAccumulator
{
public:
    typedef enum
    {
      ACCUM_OFF = 0, /**< Turn the accumulator off. */ 
      ACCUM_IN,      /**< Run the accumulator in. */ 
      ACCUM_OUT,     /**< Run the accumulator out. */ 
    } WsAccumStateT;

    typedef enum
    {
      BAR_DEFAULT = 0,
      BAR_DOWN = BAR_DEFAULT,
      BAR_UP,
    } WsBarStateT;

    WsAccumulator(WsSc* p_sc1, WsSc* p_sc2 = 0);
    ~WsAccumulator();

    void assignAccumulatorSensors(DigitalInput* p_ballPossessedSensor);
    void assignBarSolenoid(WsSolenoid* p_barSol);

    void setState(WsAccumStateT state, bool overrideState = false);
    WsAccumStateT getState(void );

    void setBarState(WsBarStateT state, bool overrideState = false);
    WsBarStateT getBarState(void );

    bool isBarUp(void );
protected:
    WsSc* ap_sc1;             /*!< The first speed controller that controls the accumulator */
    WsSc* ap_sc2;             /*!< The second speed controller that controls the accumulator */

    DigitalInput* ap_ballPossessedSensor;
    WsSolenoid* ap_barSol;

    float a_speedInSlow;     /*!< The speed to run the accumulator in when a ball is possessed */
    float a_speedIn;         /*!< The speed to run the accumulator in */
    float a_speedOut;        /*!< The speed to run the accumulator out */

    WsAccumStateT a_state;   /*!< The current state of the accumulator */
    WsBarStateT a_barState;   /*!< The current state of the accumulator bar*/
};

#endif  //_WSACCUMULATOR_H
