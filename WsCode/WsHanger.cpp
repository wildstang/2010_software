//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsHanger.cpp
//  @ Date : 2/15/2010
//  @ Author : 
//
//


#include "WsHanger.h"
#include "DigitalInput.h"
#include "WsSolenoid.h"
#include "WsSc.h"

WsHanger::WsHanger(WsSc* p_winch,
                   WsSolenoid* p_winchBrake,
                   WsSolenoid* p_armDeploy)
{
    ap_winch = p_winch;
    ap_winchBrake = p_winchBrake;
    ap_armDeploy = p_armDeploy;
    ap_armLimit = NULL;
    a_armState = ARM_STATE_NONE;
    a_winchSpeed = 0;
}

WsHanger::~WsHanger()
{

}

void WsHanger::assignArmLimitSwitches(DigitalInput* p_armLimit)
{
    ap_armLimit = p_armLimit;
}

WsHanger::WsArmStateT WsHanger::getArmState()
{
    return a_armState;
}

float WsHanger::getWinchSpeed()
{
    return a_winchSpeed;
}

bool WsHanger::getWinchBrake()
{
    return a_winchBrake;
}

void WsHanger::setArmState(WsArmStateT state)
{
    bool output = false;
    if(ap_armDeploy != NULL)
    {
        if(state == ARM_STATE_IN)
        {
            output = a_armSolStateIn;
            a_armState = state;
        }
        else if(state == ARM_STATE_OUT)
        {
            output = a_armSolStateOut;
            a_armState = state;
        }
        else
        {
            if(a_armState == ARM_STATE_OUT)
            {
                output = a_armSolStateOut;
            }
            else
            {
                output = a_armSolStateIn;
            }
        }

        //printf("ARM STATE: %d\n", output);
        ap_armDeploy->Set(output);
    }
}

void WsHanger::setWinchSpeed(float speed)
{
    bool winchBrakeValue = a_winchBrakeActive;
    bool armLimit = a_switchNotPressed;

    if( ap_winch != NULL &&
        ap_winchBrake != NULL)
    {
        if(speed != 0)
        {
            winchBrakeValue = a_winchBrakeInactive;
        }
        else
        {
            winchBrakeValue = a_winchBrakeActive;
        }


        if(ap_armLimit != NULL)
        {
            armLimit = ap_armLimit->Get();
        }

        if(armLimit == a_switchPressed)
        {
            if(speed <= 0)
            {
                speed = 0;
                winchBrakeValue = a_winchBrakeActive;
            }
        }

        ap_winchBrake->Set(winchBrakeValue);
        ap_winch->Set(speed);

        a_winchSpeed = speed;
        a_winchBrake = winchBrakeValue;
        //printf("Winch Speed: %f  Winch Brake: %d\n", speed, winchBrakeValue);
    }
}

void WsHanger::resetState(void)
{
    setWinchSpeed(0);
    setArmState(ARM_STATE_IN);
}
