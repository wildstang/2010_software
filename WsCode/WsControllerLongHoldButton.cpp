//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsControllerLongHoldButton.cpp
//  @ Date : 2/4/2010
//  @ Author : 
//
//


#include "WsControllerLongHoldButton.h"
#include "Joystick.h"
#include "Gamepad.h"
#include "Timer.h"


/**
* Constructs a WsControllerLongHoldButton
* @param p_js The joystick that the button is on
* @param button The button to read
* @param holdTime The amount of time (in decimal seconds) that the button must be pressed before returning true
*/
WsControllerLongHoldButton::WsControllerLongHoldButton(Joystick* p_js, UINT32 button, double holdTime)
{
    ap_joystick = p_js;
    a_buttonNum = button;
    a_holdTime = holdTime;
    a_state = false;
    a_timer.Start();
}

/**
* Constructs a WsControllerLongHoldButton
* @param p_pad The gamepad that the button is on
* @param button The button to read
* @param holdTime The amount of time (in decimal seconds) that the button must be pressed before returning true
*/
WsControllerLongHoldButton::WsControllerLongHoldButton(Gamepad* p_gamepad, UINT32 button, double holdTime)
{
    ap_gamepad = p_gamepad;
    a_buttonNum = button;
    a_holdTime = holdTime;
    a_state = false;
    a_timer.Start();
}

/**
* Constructs a WsControllerLongHoldButton
* @param p_pad The gamepad that the DPad button is on
* @param dPad The DPad button to read
* @param holdTime The amount of time (in decimal seconds) that the button must be pressed before returning true
*/
WsControllerLongHoldButton::WsControllerLongHoldButton(Gamepad* p_gamepad, Gamepad::DPadDirection dpad, double holdTime)
{
    ap_gamepad = p_gamepad;
    a_dpadDir = dpad;
    a_holdTime = holdTime;
    a_state = false;
    a_timer.Start();
}

/**
* Constructs a WsControllerLongHoldButton
* @param channelNum The DS channel number to use as input
* @param holdTime The amount of time (in decimal seconds) that the button must be pressed before returning true
*/
WsControllerLongHoldButton::WsControllerLongHoldButton(UINT32 channelNum, double holdTime)
{
    a_channelNum = channelNum;
    a_holdTime = holdTime;
    a_state = false;
    a_timer.Start();
}

/**
* Calculates the state of the button.
* @returns
* - true - If the button has been held for a contiguous amount of time greater than the threshold
* - false - If the button has been held for a contiguous amount of time less than the threshold, or is not pressed.
*/
bool WsControllerLongHoldButton::getState(void )
{
    static bool buttonStatePrev = false;
    bool buttonState;

    buttonState = WsControllerButton::getState();

    if(buttonState == true)
    {
        if(buttonStatePrev == false)
        {
            // First time pressed, reset the timer
            a_timer.Reset();
        }

        if(a_state == false)
        {
            // If we haven't latched the true state,
            // Check to see if the hold time has passed
            if(a_timer.HasPeriodPassed(a_holdTime))
            {
                // The timer is up, the state is now true
                a_state = true;
            }
        }
    }
    else
    {
        // The button was released so the state is now false
        a_state = false;
    }

    buttonStatePrev = buttonState;

    return a_state;
}

