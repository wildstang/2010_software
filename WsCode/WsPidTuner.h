//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsPidTuner.h
//  @ Date : 1/26/2010
//  @ Author : 
//
//


#if !defined(_WSPIDTUNER_H)
#define _WSPIDTUNER_H

#include <stdio.h>
#include "WsPidParams.h"

class WsControllerButton;
class WsControllerAxis;
class WsTunableController;
class WsPid;

// Can't use 0 because of floating point
#define MIN_PID_VALUE (.00001)
#define INCR_PARAM_STEP_SMALL (.001)
#define INCR_PARAM_STEP_LARGE (.01)
#define EPS_STEP_SMALL (1)
#define EPS_STEP_LARGE (5)
#define STEP_VALUE_STEP_SMALL (10)
#define STEP_VALUE_STEP_LARGE (5)

class WsPidTuner
{
public:
    WsPidTuner();
    ~WsPidTuner();
    void assignTuneButton(WsControllerButton* p_button);
    void assignParamSelectButtons(WsControllerButton* p_prevButton, WsControllerButton* p_nextButton);
    void assignParamModifyButtons(WsControllerButton* p_incrButton, WsControllerButton* p_decrButton);
    void assignRunStepTestButton(WsControllerButton* p_button);
    void assignRunPidButton(WsControllerButton* p_button);
    void assignControllerAxis(WsControllerAxis* p_axis);
    void assignTunableController(WsTunableController* p_controller);
    bool isTuning(void);
    void init(void );
    void finish(void );
    bool processTuning(void );
    void runStepTest(void );
    void endStepTest(void );
    void runPidTest(void );

    bool getEnableState(void);
    bool getTestingState(void);
    float getP(void);
    float getI(void);
    float getD(void);
    float getEps(void);
    float getIncrSmall(void);
    float getIncrLarge(void);
    float getStepFuncSize(void);
    UINT32 getSetPoint(void);
    UINT32 getCurrentValue(void);
    float getOutput(void);
    UINT32 getCurrentParam(void);

    typedef enum 
    {
        WS_PID_TUNER_PARAM_NONE,
        WS_PID_TUNER_PARAM_P,
        WS_PID_TUNER_PARAM_I,
        WS_PID_TUNER_PARAM_D,
        WS_PID_TUNER_PARAM_EPS,
        WS_PID_TUNER_PARAM_INCR_SMALL,
        WS_PID_TUNER_PARAM_INCR_LARGE,
        WS_PID_TUNER_PARAM_STEP_VALUE,
        WS_PID_TUNER_PARAM_MAX,
    } WsPidTunerParamT;

    typedef enum
    {
        MODE_WAIT_FOR_TUNE_PRESS = 0,
        MODE_ADJUST_PARAMS,
        MODE_RUN_STEP_TEST,
        MODE_RUN_PID,
        MODE_DONE,
    } WsPidTunerModeT;

    typedef enum
    {
        MOD_DECR = 0,
        MOD_INCR,
    } WsPidTunerModT;

    typedef enum
    {
        STEP_SMALL = 0,
        STEP_LARGE,
    } WsPidTunerStepMode;



protected:
    WsControllerButton* ap_tunePidButton;
    WsControllerButton* ap_paramSelectNextButton;
    WsControllerButton* ap_paramSelectPrevButton;
    WsControllerButton* ap_paramIncrButton;
    WsControllerButton* ap_paramDecrButton;
    WsControllerButton* ap_runStepTestButton;
    WsControllerButton* ap_runPidButton;
    WsControllerAxis* ap_controlAxis;
    WsTunableController* ap_controller;
    WsPid* ap_pid;
    WsPidParams a_origPid;
    WsPidParams a_currentPid;
    float a_incrSizeSmall;
    float a_incrSizeLarge;
    float a_stepValue;
    WsPidTunerParamT a_currentParam;
    WsPidTunerModeT a_mode;
    WsPidTunerStepMode a_stepMode;
    bool a_isTuning;
    UINT32 a_setPoint;
    UINT32 a_currentValue;
    float a_currentOutput;

    void modifyParam(WsPidTunerModT mod);

};

#endif  //_WSPIDTUNER_H
