//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2010
//  @ File Name : WsLogger.cpp
//  @ Date : 1/17/2009
//  @ Author : 
//
//


#include <stdarg.h>
#include <string.h>
#include <sockLib.h>
#include "WsLogger.h"
#include "LogServer/logtask.h"

#define LOG_BUF_SIZE 300

WsLogger* WsLogger::ap_instance = NULL;

WsLogger::WsLogger()
{
  a_severity = LOG_HIGH;
  a_type_mask = 0;
  a_sockfd = -1;
  memset(&a_addr, 0, sizeof(a_addr));
  a_addrlen = 0;

  //a_type_mask |= LOG_DRIVE_INPUT;
  //a_type_mask |= LOG_CRAB_INPUT;
  //a_type_mask = LOG_ALL;
}

WsLogger::~WsLogger()
{
  if (ap_instance == NULL)
  {
      delete ap_instance;
  }

  ap_instance = NULL;
}

WsLogger* WsLogger::getInstance()
{
  if (ap_instance == NULL)
  {
    ap_instance = new WsLogger();
    ap_instance->initSendingSocket();
  }

  return ap_instance;
}

void WsLogger::initSendingSocket()
{
  a_sockfd = socket(AF_INET, SOCK_DGRAM, 0);

  a_addr.sin_family = AF_INET;
  inet_aton("127.0.0.1", &a_addr.sin_addr);
  a_addr.sin_port = htons(UDP_LISTENER_PORT);
  a_addrlen = sizeof(a_addr);
}

void WsLogger::setSeverity(UINT32 severity)
{
  a_severity = severity;
}

void WsLogger::setTypeMask(UINT32 type_mask)
{
  a_type_mask = type_mask;
}

void WsLogger::print(UINT32 severity, UINT32 type, const char* fmt, ...)
{
  char buffer[LOG_BUF_SIZE];
  int num_bytes;
  va_list ap;

  if ((severity >= a_severity) && ((a_type_mask & type) != 0))
  {
    va_start(ap, fmt);
    num_bytes = vsnprintf(buffer, LOG_BUF_SIZE, fmt, ap);
    va_end(ap);

    //printf(buffer);

    if (a_sockfd != -1)
    {
      sendto(a_sockfd, buffer, num_bytes, 0, (struct sockaddr *)&a_addr,
          a_addrlen);
    }
  }
}


extern "C"
{

void setLogSeverity(UINT32 severity)
{
  WsLogger* logger = WsLogger::getInstance();

  logger->setSeverity(severity);
}

void setLogTypeMask(UINT32 type_mask)
{
  WsLogger* logger = WsLogger::getInstance();

  logger->setTypeMask(type_mask);
}

}

