//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2010
//  @ File Name : WsCrabController.cpp
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#include "WsCrabController.h"
#include "AnalogChannel.h"
#include "WsCalibration.h"
#include "WsSc.h"
#include "WsPot.h"
#include "WsPid.h"

/**
* Constructs a WsCrabController object
*/
WsCrabController::WsCrabController(WsSc* p_sc, WsPot* p_pot)
{
    ap_pid = NULL;
    ap_calib = WsCalibration::getInstance();
    ap_crabPot = p_pot;
    ap_crabScLeft = p_sc;
    ap_crabScRight = NULL;
    a_outputSpeedPrev = 0;
    a_useAlignPid = false;
}

/**
*
*/
WsCrabController::WsCrabController(WsSc* p_scL, WsSc* p_scR, WsPot* p_pot)
{
    ap_pid = NULL;
    ap_calib = WsCalibration::getInstance();
    ap_crabPot = p_pot;
    ap_crabScLeft = p_scL;
    ap_crabScRight = p_scR;
    a_outputSpeedPrev = 0;
    a_useAlignPid = false;
}

/**
*
*/
WsCrabController::~WsCrabController()
{
}

/**
*
*/
void WsCrabController::assignPid(WsPid* p_pid)
{
    ap_pid = p_pid;
}

void WsCrabController::assignAlignPid(WsPid* p_pid)
{
    ap_alignPid = p_pid;
    ////printf("CRAB CONTROLLER ALIGN %f\n", ap_alignPid->getP());
}

/**
*
*/
WsPid* WsCrabController::getPid(void )
{
    return ap_pid;
}

void WsCrabController::useAlignPid(bool use)
{
  a_useAlignPid = use;
}

/**
*
*/
void WsCrabController::setOutputSpeed(float speed)
{
    //printf("crabSc %f ", speed);
    if(ap_crabScLeft != NULL)
    {
        ap_crabScLeft->Set(speed);
    }

    if(ap_crabScRight != NULL)
    {
        ap_crabScRight->Set(speed);
    }
    a_outputSpeedPrev = speed;
}

/**
*
*/
void WsCrabController::setAngle(float angle)
{
    UINT32 targ_pot;
    UINT32 cur_pot;
    float speed;

    if(angle > CRAB_ANGLE_MAX)
    {
        angle = CRAB_ANGLE_MAX;
    }
    else if(angle < CRAB_ANGLE_MIN)
    {
        angle = CRAB_ANGLE_MIN;
    }

    targ_pot = convertDegToPot(angle);
    cur_pot = ap_crabPot->GetAverageValue();

    //printf("pot cur %4d dest %4d ", cur_pot, targ_pot);

    if(cur_pot > 1024)
    {
        speed = 0;
    }
    else
    {
      WsPid* tempPid;
      if(a_useAlignPid == false)
      {
        //printf(" REG PID: ");
        tempPid = ap_pid;
      }
      else
      {
        //printf(" ALIGN PID: ");
        tempPid = ap_alignPid;
        //printf(" %f\n", ap_alignPid->getP());
      }

      //printf("%f\n", tempPid->getP());
      tempPid->setDesiredValue(targ_pot);
      speed = tempPid->calcPid(cur_pot);

      if(tempPid->isDone() == true)
      {
        speed = 0;
      }
    }
    setOutputSpeed(speed);
}

UINT32 WsCrabController::convertDegToPot(float angle)
{
    UINT32 pot_val = 0;
    UINT32 pot_mid = ap_calib->getValue(WsCalibration::CRAB_MID);
    UINT32 pot_left = ap_calib->getValue(WsCalibration::CRAB_LEFT);
    UINT32 pot_right = ap_calib->getValue(WsCalibration::CRAB_RIGHT);

    if (angle > 0)
    {
        pot_val = (UINT32)(((angle * (pot_right - pot_mid)) / 90) + pot_mid);
    }
    else if (angle < 0)
    {
        pot_val = (UINT32)(((angle * (pot_mid - pot_left)) / 90) + pot_mid);
    }
    else
    {
        pot_val = pot_mid;
    }

    return pot_val;
}

void WsCrabController::runStepTest(float angle, UINT32& currentVal, float& speed)
{
    printf("Crab step test %f ", angle);
    setAngle(angle);
    currentVal = ap_crabPot->GetAverageValue();
    printf("\n");
    speed = a_outputSpeedPrev;
}

void WsCrabController::endStepTest(void)
{
    printf("End Crab step test\n");
    setOutputSpeed(0);
}
