//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsPidTuner.cpp
//  @ Date : 1/26/2010
//  @ Author : 
//
//


#include "WsPidTuner.h"
#include "WsControllerButton.h"
#include "WsControllerAxis.h"
#include "WsTunableController.h"
#include "WsPid.h"

WsPidTuner::WsPidTuner()
{
    ap_tunePidButton = NULL;
    ap_paramSelectNextButton = NULL;
    ap_paramSelectPrevButton = NULL;
    ap_paramIncrButton = NULL;
    ap_paramDecrButton = NULL;
    ap_runStepTestButton = NULL;
    ap_runPidButton = NULL;
    ap_controlAxis = NULL;
    ap_controller = NULL;
    ap_pid = NULL;

    a_origPid.a_p = 0;
    a_origPid.a_d = 0;
    a_origPid.a_i = 0;
    a_origPid.a_eps = 0;

    a_currentPid.a_p = 0;
    a_currentPid.a_d = 0;
    a_currentPid.a_i = 0;
    a_currentPid.a_eps = 0;

    a_incrSizeSmall = .001;
    a_incrSizeLarge = .01;
    a_stepValue = 0;

    a_setPoint = 0;
    a_currentValue = 0;

    a_isTuning = false;
    a_currentParam = WS_PID_TUNER_PARAM_P;

    a_mode = MODE_WAIT_FOR_TUNE_PRESS;
}

WsPidTuner::~WsPidTuner()
{

}

void WsPidTuner::assignTuneButton(WsControllerButton* p_button)
{
    ap_tunePidButton = p_button;
}

void WsPidTuner::assignParamSelectButtons(WsControllerButton* p_prevButton, WsControllerButton* p_nextButton)
{
    ap_paramSelectPrevButton = p_prevButton;
    ap_paramSelectNextButton = p_nextButton;
}

void WsPidTuner::assignParamModifyButtons(WsControllerButton* p_incrButton, WsControllerButton* p_decrButton)
{
    ap_paramIncrButton = p_incrButton;
    ap_paramDecrButton = p_decrButton;
}

void WsPidTuner::assignRunStepTestButton(WsControllerButton* p_button)
{
    ap_runStepTestButton = p_button;
}

void WsPidTuner::assignRunPidButton(WsControllerButton* p_button)
{
    ap_runPidButton = p_button;
}

void WsPidTuner::assignControllerAxis(WsControllerAxis* p_axis)
{
    ap_controlAxis = p_axis;
}

void WsPidTuner::assignTunableController(WsTunableController* p_controller)
{
    ap_controller = p_controller;

    if(ap_controller != NULL)
    {
        ap_pid = ap_controller->getPid();
    }
    else
    {
        printf("NO CONTROLLER ASSIGNED\n");
    }
}

void WsPidTuner::init(void )
{
    if( ap_pid != NULL)
    {
        a_origPid.a_p = ap_pid->getP();
        a_origPid.a_d = ap_pid->getD();
        a_origPid.a_i = ap_pid->getI();
        a_origPid.a_eps = ap_pid->getEpsilon();

        a_mode = MODE_WAIT_FOR_TUNE_PRESS;
        a_currentParam = WS_PID_TUNER_PARAM_P;
        a_stepMode = STEP_SMALL;

        a_incrSizeSmall = .001;
        a_incrSizeLarge = .01;
        a_stepValue = 0;
    }
    else
    {
        printf("NO PID\n");
    }
}

void WsPidTuner::finish(void )
{
    if(a_isTuning)
    {
        ap_pid->setConstants(a_origPid.a_p, a_origPid.a_i, a_origPid.a_d);
        ap_pid->setErrorEpsilon(a_origPid.a_eps);
    }
    a_isTuning = false;
}

bool WsPidTuner::isTuning(void)
{
    return a_isTuning;
}

bool WsPidTuner::processTuning(void )
{
    bool setOutput = false;

    static bool prevTuneButton = false;
    static bool prevNextButton = false;
    static bool prevPrevButton = false;
    static bool prevIncrButton = false;
    static bool prevDecrButton = false;
    static bool prevRunStepTestButton = false;

    bool currentTuneButton = false;
    bool currentNextButton = false;
    bool currentPrevButton = false;
    bool currentIncrButton = false;
    bool currentDecrButton = false;
    bool currentRunStepTestButton = false;

    if(ap_tunePidButton != NULL)
    {
        currentTuneButton = ap_tunePidButton->getState();
    }
    else
    {
        currentTuneButton = false;
        a_mode = MODE_DONE;
    }

    if(ap_runStepTestButton != NULL)
    {
        currentRunStepTestButton = ap_runStepTestButton->getState();
    }
    else
    {
        currentRunStepTestButton = false;
    }


    switch(a_mode)
    {
        case MODE_WAIT_FOR_TUNE_PRESS:
            printf("Wait for tune press\n");
            // Wait here until the tune button is pressed
            if(currentTuneButton == true && prevTuneButton == false)
            {
                printf("pressed\n");
                a_mode = MODE_ADJUST_PARAMS;
                a_isTuning = true;
            }
            break;
        case MODE_ADJUST_PARAMS:
            printf("Adjusting %d -> ", a_currentParam);
            if(currentTuneButton == true && prevTuneButton == false)
            {
                a_mode = MODE_DONE;
            }
            else if( ap_paramSelectNextButton != NULL &&
                    ap_paramSelectPrevButton != NULL &&
                    ap_paramIncrButton != NULL &&
                    ap_paramDecrButton != NULL)
            {
                currentPrevButton = ap_paramSelectPrevButton->getState();
                currentNextButton = ap_paramSelectNextButton->getState();
                currentIncrButton = ap_paramIncrButton->getState();
                currentDecrButton = ap_paramDecrButton->getState();

                if(prevNextButton == false && currentNextButton == true)
                {
                    if( a_currentParam >= WS_PID_TUNER_PARAM_MAX - 1)
                    {
                        a_currentParam = (WsPidTunerParamT)(WS_PID_TUNER_PARAM_NONE + 1);
                    }
                    else
                    {
                        a_currentParam = (WsPidTunerParamT)(a_currentParam + 1);
                    }
                }
                else if(prevPrevButton == false && currentPrevButton == true)
                {
                    if( a_currentParam <= (WsPidTunerParamT)(WS_PID_TUNER_PARAM_NONE + 1))
                    {
                        a_currentParam = (WsPidTunerParamT)(WS_PID_TUNER_PARAM_MAX - 1);
                    }
                    else
                    {
                        a_currentParam = (WsPidTunerParamT)(a_currentParam - 1);
                    }
                }
                else if(prevIncrButton == false && currentIncrButton == true)
                {
                    modifyParam(MOD_INCR);
                }
                else if(prevDecrButton == false && currentDecrButton == true)
                {
                    modifyParam(MOD_DECR);
                }
                else if( prevRunStepTestButton == false && currentRunStepTestButton == true)
                {
                    printf("Start step test\n");
                    a_mode = MODE_RUN_STEP_TEST;
                }
                else
                {
                }

                printf("%d  (%f, %f, %f, %d)\n", a_currentParam,
                        ap_pid->getP(),
                        ap_pid->getI(),
                        ap_pid->getD(),
                        ap_pid->getEpsilon());

                prevNextButton = currentNextButton;
                prevPrevButton = currentPrevButton;
                prevIncrButton = currentIncrButton;
                prevDecrButton = currentDecrButton;
            }
            else
            {
                a_mode = MODE_DONE;
            }
            break;
        case MODE_RUN_STEP_TEST:
            if(ap_runStepTestButton->getState())
            {
                runStepTest();
                setOutput = true;
            }
            else
            {
                printf("End test\n");
                endStepTest();
                setOutput = true;
                a_mode = MODE_ADJUST_PARAMS;
            }
            break;
        case MODE_RUN_PID:
            if(currentTuneButton == true && prevTuneButton == false)
            {
                a_mode = MODE_ADJUST_PARAMS;
            }
            break;
        case MODE_DONE:
            printf("MODE DONE\n");
            finish();
            // be sure that we release before entering
            currentTuneButton = true;
            currentNextButton = false;
            currentPrevButton = false;
            currentIncrButton = false;
            currentDecrButton = false;
            break;
        default:
            printf("DEFAULT\n");
            a_mode = MODE_DONE;
    }

    prevTuneButton = currentTuneButton;
    prevRunStepTestButton = currentRunStepTestButton;

    return setOutput;
}

void WsPidTuner::runStepTest(void )
{
    if(ap_controller != NULL)
    {
        ap_controller->runStepTest(a_stepValue, a_currentValue, a_currentOutput);
    }
}

void WsPidTuner::endStepTest(void )
{
    if(ap_controller != NULL)
    {
        ap_controller->endStepTest();
    }
}

void WsPidTuner::runPidTest(void )
{
    if(ap_controller != NULL)
    {
        if(ap_controlAxis != NULL)
        {
            //ap_controller->runPidTest(ap_controlAxis->getValue());
        }
    }

}

void WsPidTuner::modifyParam(WsPidTunerModT mod)
{
    float incrSize = 0;
    float currentP = 0;
    float currentI = 0;
    float currentD = 0;
    float currentEps = 0;

    if(a_stepMode == STEP_LARGE)
    {
        incrSize = a_incrSizeLarge;
    }
    else
    {
        incrSize = a_incrSizeSmall;
    }

    if(mod == MOD_DECR)
    {
        incrSize *= -1;
    }

    if(ap_pid != NULL)
    {
        currentP = ap_pid->getP();
        currentI = ap_pid->getI();
        currentD = ap_pid->getD();
        currentEps = (float)ap_pid->getEpsilon();
    }

    switch(a_currentParam)
    {
        case WS_PID_TUNER_PARAM_P:
            currentP += incrSize;
            if(currentP < MIN_PID_VALUE)
            {
                currentP = 0;
            }
            break;
        case WS_PID_TUNER_PARAM_I:
            currentI += incrSize;
            if(currentI < MIN_PID_VALUE)
            {
                currentI = 0;
            }
            break;
        case WS_PID_TUNER_PARAM_D:
            currentD += incrSize;
            if(currentD < MIN_PID_VALUE)
            {
                currentD = 0;
            }
            break;
        case WS_PID_TUNER_PARAM_EPS:
            if(mod == MOD_DECR)
            {
                currentEps -= (float)EPS_STEP_SMALL;
                if(currentEps < MIN_PID_VALUE)
                {
                    currentEps = 0;
                }
            }
            else
            {
                currentEps += (float)EPS_STEP_SMALL;
            }
            break;

        case WS_PID_TUNER_PARAM_INCR_SMALL:
            if(mod == MOD_DECR)
            {
                a_incrSizeSmall -= INCR_PARAM_STEP_SMALL;
                if(a_incrSizeSmall < 0)
                {
                    a_incrSizeSmall = INCR_PARAM_STEP_SMALL;
                 }
            }
            else
            {
                a_incrSizeSmall += INCR_PARAM_STEP_SMALL;
            }
            break;
        case WS_PID_TUNER_PARAM_INCR_LARGE:
            if(mod == MOD_DECR)
            {
                a_incrSizeLarge -= INCR_PARAM_STEP_SMALL;
                if(a_incrSizeLarge < 0)
                {
                    a_incrSizeLarge = INCR_PARAM_STEP_SMALL;
                 }
            }
            else
            {
                a_incrSizeLarge += INCR_PARAM_STEP_SMALL;
            }
            break;
        case WS_PID_TUNER_PARAM_STEP_VALUE:
            if(mod == MOD_DECR)
            {
                a_stepValue -= STEP_VALUE_STEP_SMALL;
            }
            else
            {
                a_stepValue += STEP_VALUE_STEP_SMALL;
            }
            break;
        default:
            break;
    }

    if(ap_pid != NULL)
    {
        ap_pid->setConstants(currentP, currentI, currentD);
        ap_pid->setErrorEpsilon((int)currentEps);
    }

}
bool WsPidTuner::getEnableState(void)
{
    return a_isTuning;
}

bool WsPidTuner::getTestingState(void)
{
    return (a_mode == MODE_RUN_STEP_TEST);
}

float WsPidTuner::getP(void)
{
    float value = 0;

    if(ap_pid != NULL)
    {
        value = ap_pid->getP();
    }

    return value;
}

float WsPidTuner::getI(void)
{
    float value = 0;

    if(ap_pid != NULL)
    {
        value = ap_pid->getI();
    }

    return value;
}

float WsPidTuner::getD(void)
{
    float value = 0;

    if(ap_pid != NULL)
    {
        value = ap_pid->getD();
    }

    return value;
}

float WsPidTuner::getEps(void)
{
    float value = 0;

    if(ap_pid != NULL)
    {
        value = (float) ap_pid->getEpsilon();
    }

    return value;
}

float WsPidTuner::getIncrSmall(void)
{
    return a_incrSizeSmall;
}

float WsPidTuner::getIncrLarge(void)
{
    return a_incrSizeLarge;
}

float WsPidTuner::getStepFuncSize(void)
{
    return a_stepValue;
}

UINT32 WsPidTuner::getSetPoint(void)
{
    UINT32 value = 0;

    if(ap_pid != NULL)
    {
        value = ap_pid->getDesiredValue();
    }

    return value;
}

UINT32 WsPidTuner::getCurrentValue(void)
{
    return a_currentValue;
}

float WsPidTuner::getOutput(void)
{
    return a_currentOutput;
}

UINT32 WsPidTuner::getCurrentParam(void)
{
    return (UINT32)a_currentParam;
}

