//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsAppendageControl.cpp
//  @ Date : 1/30/2010
//  @ Author : 
//
//


#include "WsAppendageControl.h"
#include "WsControllerButton.h"
#include "WsControllerAxis.h"

/**
* Constructs a WsAccumulator
*/
WsAppendageControl::WsAppendageControl()
{
    ap_accumInButton = NULL;
    ap_accumOutButton = NULL;
    ap_accumBarRaiseButton = NULL;
    ap_prepareKickerButton = NULL;
    ap_stowKickerButton = NULL;
    ap_kickHighButton = NULL;
    ap_kickLowButton = NULL;
    ap_kickBabyButton = NULL;
    ap_kickBabyHighButton = NULL;
    ap_kickRangeNearButton = NULL;
    ap_kickRangeFarButton = NULL;
    ap_releaseArmsButton = NULL;
    ap_releaseTowerAlignButton = NULL;
    ap_toggleTowerFingersButton = NULL;
    ap_winchSlowSafetyButton = NULL;
    ap_winchFullSafetyButton = NULL;
    ap_winchDriveAxis = NULL;

    a_accumState = WsAccumulator::ACCUM_OFF;
}

/**
* Destructs a WsAccumulator
*/
WsAppendageControl::~WsAppendageControl()
{

}

/**
* Reads the state of the accumulator inputs and calculates an accumulator state.
* - The accumulator is to be OFF by default.
* - When the "in" button is pressed, the accumulator command will be IN.
* It will continue to be IN until the "off" button is pressed or the "out" button
* is pressed.
* - When the "out" button is pressed, the accumulator command will be OUT.  When the
* "out" button is released, the accumulator command will be OFF.
*
* @returns The desired WsAccumStateT command
*/
WsAccumulator::WsAccumStateT WsAppendageControl::getAccumulatorCommand(void )
{
    bool accumInState = false;
    bool accumOutState = false;

    if (ap_accumInButton != NULL)
    {
        accumInState = ap_accumInButton->getState();
    }

    if (ap_accumOutButton != NULL)
    {
        accumOutState = ap_accumOutButton->getState();
    }

    if (accumInState == true)
    {
        a_accumState = WsAccumulator::ACCUM_IN;
    }
    else if (accumOutState == true)
    {
        a_accumState = WsAccumulator::ACCUM_OUT;
    }
    else
    {
        a_accumState = WsAccumulator::ACCUM_OFF;
    }

    return a_accumState;
}

WsAccumulator::WsBarStateT WsAppendageControl::getAccumulatorBarCommand(void )
{
    bool accumBarState = false;

    if (ap_accumBarRaiseButton != NULL)
    {
        accumBarState = ap_accumBarRaiseButton->getState();
    }

    if(accumBarState == true &&
       a_accumState != WsAccumulator::ACCUM_IN)
    {
        a_accumBarState = WsAccumulator::BAR_UP;
    }
    else if(a_accumState  != WsAccumulator::ACCUM_OFF)
    {
        a_accumBarState = WsAccumulator::BAR_DOWN;
    }
    else
    {
        a_accumBarState = WsAccumulator::BAR_DOWN;
    }

    return a_accumBarState;

}

/**
* Reads the state of the various kicker inputs and calculates the corresponding state
*
* @returns The desired WsKickerCommandT command
*/
WsKicker::WsKickerCommandT WsAppendageControl::getKickerCommand(void )
{
    bool prepareKick = false;
    bool stowKick = false;
    bool kickHigh = false;
    bool kickLow = false;
    bool kickBaby = false;
    bool kickBabyHigh = false;
    bool rangeNear = false;
    bool rangeFar = false;
    WsKicker::WsKickerCommandT command = WsKicker::KICKER_CMD_NONE;

    if (ap_prepareKickerButton != NULL)
    {
        prepareKick = ap_prepareKickerButton->getState();
    }

    if (ap_stowKickerButton != NULL)
    {
        stowKick = ap_stowKickerButton->getState();
    }

    if (ap_kickHighButton != NULL)
    {
        kickHigh = ap_kickHighButton->getState();
    }

    if (ap_kickLowButton != NULL)
    {
        kickLow = ap_kickLowButton->getState();
    }

    if (ap_kickBabyButton != NULL)
    {
        kickBaby = ap_kickBabyButton->getState();
    }

    if (ap_kickBabyHighButton != NULL)
    {
        kickBabyHigh = ap_kickBabyHighButton->getState();
    }


    if (ap_kickRangeNearButton != NULL)
    {
        rangeNear = ap_kickRangeNearButton->getState();
    }

    if (ap_kickRangeFarButton != NULL)
    {
        rangeFar = ap_kickRangeFarButton->getState();
    }

    if (kickHigh == true)
    {
        command = WsKicker::KICKER_CMD_KICK_HIGH;
    }
    else if (kickLow == true)
    {
        command = WsKicker::KICKER_CMD_KICK_LOW;
    }
    else if (kickBaby == true)
    {
        command = WsKicker::KICKER_CMD_KICK_BABY_LOW;
    }
    else if (kickBabyHigh == true)
    {
        command = WsKicker::KICKER_CMD_KICK_BABY_HIGH;
    }
    else if (prepareKick == true)
    {
        command = WsKicker::KICKER_CMD_PREPARE_TO_KICK;
    }
    else if (rangeNear == true)
    {
        command = WsKicker::KICKER_CMD_SET_RANGE_NEAR;
    }
    else if (rangeFar == true)
    {
        command = WsKicker::KICKER_CMD_SET_RANGE_FAR;
    }
    else if (stowKick == true)
    {
        command = WsKicker::KICKER_CMD_STOW;
    }

    return command;
}

WsHanger::WsArmStateT WsAppendageControl::getArmState(void)
{
    WsHanger::WsArmStateT state = WsHanger::ARM_STATE_NONE;

    if(ap_releaseArmsButton != NULL)
    {
        if(ap_releaseArmsButton->getState() == true)
        {
            state = WsHanger::ARM_STATE_OUT;
        }
        else
        {
            state = WsHanger::ARM_STATE_IN;
        }
    }

    return state;
}

float WsAppendageControl::getWinchSpeed(void)
{
    float speed = 0.0;

    if(ap_winchSlowSafetyButton != NULL &&
       ap_winchFullSafetyButton != NULL &&
       ap_winchDriveAxis != NULL)

    {
        if(ap_winchSlowSafetyButton->getState() == true)
        {
            speed = ap_winchDriveAxis->getValue() * a_slowWinchSpeedScaleFactor;
        }
        else if(ap_winchFullSafetyButton->getState() == true)
        {
            speed = ap_winchDriveAxis->getValue();
        }
        else
        {
            speed = 0.0;
        }
    }

    return speed;
}

WsTowerAlign::WsTowerAlignStateT WsAppendageControl::getTowerAlignState(void)
{
    WsTowerAlign::WsTowerAlignStateT state = WsTowerAlign::TOWER_ALIGN_STATE_NONE;

    if(ap_releaseTowerAlignButton != NULL)
    {
        if(ap_releaseTowerAlignButton->getState() == true)
        {
            state = WsTowerAlign::TOWER_ALIGN_STATE_OUT;
        }
        else
        {
            state = WsTowerAlign::TOWER_ALIGN_STATE_IN;
        }
    }

    return state;
}

WsTowerFingers::WsTowerFingerStateT WsAppendageControl::getTowerFingersState(void)
{
    WsTowerFingers::WsTowerFingerStateT state = WsTowerFingers::TOWER_FINGER_STATE_NONE;

    if(ap_toggleTowerFingersButton != NULL)
    {
        if(ap_toggleTowerFingersButton->getState() == true)
        {
            state = WsTowerFingers::TOWER_FINGER_STATE_OUT;
        }
        else
        {
            state = WsTowerFingers::TOWER_FINGER_STATE_IN;
        }
    }

    return state;
}


/**
* Reads the input buttons and generates a WsHangerCommandT command
*
* @returns WsHangerCommandT command
*/
/*
WsHanger::WsHangerCommandT WsAppendageControl::getHangerCommand(void )
{
    WsHanger::WsHangerCommandT command = WsHanger::HANGER_NONE;

    if ((ap_hangerDeployButton != NULL) && (ap_hangerRetractButton != NULL))
    {
        if (ap_hangerRetractButton->getState() == true)
        {
            command = WsHanger::HANGER_IN;
        }
        else if (ap_hangerDeployButton->getState() == true)
        {
            command = WsHanger::HANGER_OUT;
        }
    }

    return command;
}
*/

/**
* Stops the accumulator
*/
void WsAppendageControl::stopAccumulator(void )
{
    a_accumState = WsAccumulator::ACCUM_OFF;
}

/**
* Assigns the passed in accumulator buttons to corresponding members
*
* @param p_in The button that the driver presses to run the accumulator in
* @param p_out The button that the driver presses to run the accumulator out
* @param p_off The button that the driver presses to turn the accumulator off
*/
void WsAppendageControl::assignAccumButtons(WsControllerButton* p_in, WsControllerButton* p_out, WsControllerButton* p_barRaise)
{
    ap_accumInButton = p_in;
    ap_accumOutButton = p_out;
    ap_accumBarRaiseButton = p_barRaise;
}

/**
* Assigns the passed in kicker buttons to corresponding members
*
* @param p_prepKick The button that the driver presses to prepare to kick
* @param p_stow The button that the driver presses to stow the kicker
* @param p_kickHigh The button that the driver presses to kick with a high loft
* @param p_kickLow The button that the driver presses to kick with a low loft
* @param p_kickBaby The button that the driver presses to kick really short
* @param p_rangeNear The button that the driver presses to set the range to near
* @param p_rangeFar The button that the driver presses to set the range to far
*/
void WsAppendageControl::assignKickerButtons(WsControllerButton* p_prepKick, WsControllerButton* p_stow,
        WsControllerButton* p_kickHigh, WsControllerButton* p_kickLow,
        WsControllerButton* p_kickBaby, WsControllerButton* p_kickBabyHigh,
        WsControllerButton* p_rangeNear, WsControllerButton* p_rangeFar)
{
    ap_prepareKickerButton = p_prepKick;
    ap_stowKickerButton = p_stow;
    ap_kickHighButton = p_kickHigh;
    ap_kickLowButton = p_kickLow;
    ap_kickBabyButton = p_kickBaby;
    ap_kickBabyHighButton = p_kickBabyHigh;
    ap_kickRangeNearButton = p_rangeNear;
    ap_kickRangeFarButton = p_rangeFar;
}

void WsAppendageControl::assignHangerInputs( WsControllerButton* p_releaseArmsButton,
                                             WsControllerButton* p_releaseTowerAlignButton,
                                             WsControllerButton* p_toggleTowerFingersButton,
                                             WsControllerButton* p_winchSlowSafetyButton,
                                             WsControllerButton* p_winchFullSafetyButton,
                                             WsControllerAxis* p_winchDriveAxis)
{
    ap_releaseArmsButton = p_releaseArmsButton;
    ap_releaseTowerAlignButton = p_releaseTowerAlignButton;
    ap_toggleTowerFingersButton = p_toggleTowerFingersButton;
    ap_winchSlowSafetyButton = p_winchSlowSafetyButton;
    ap_winchFullSafetyButton = p_winchFullSafetyButton;
    ap_winchDriveAxis = p_winchDriveAxis;
}

