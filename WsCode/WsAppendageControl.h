//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsAppendageControl.h
//  @ Date : 1/30/2010
//  @ Author : 
//
//


#if !defined(_WSAPPENDAGECONTROL_H)
#define _WSAPPENDAGECONTROL_H

#include "WsAccumulator.h"
#include "WsKicker.h"
#include "WsHanger.h"
#include "WsTowerAlign.h"
#include "WsTowerFingers.h"

class WsControllerButton;
class WsControllerAxis;

/**
 * The input side for the appendage.  This class is the interface that reads the driver inputs and
 * converts them to appendage commands.
 */
class WsAppendageControl
{
public:
    WsAppendageControl();
    ~WsAppendageControl();
    WsAccumulator::WsAccumStateT getAccumulatorCommand(void );
    WsAccumulator::WsBarStateT getAccumulatorBarCommand(void );

    static const float a_slowWinchSpeedScaleFactor = 0.5;

    /****** Get commands *****/
    WsKicker::WsKickerCommandT getKickerCommand(void );
    WsHanger::WsArmStateT getArmState(void);
    float getWinchSpeed(void);
    WsTowerAlign::WsTowerAlignStateT getTowerAlignState(void);
    WsTowerFingers::WsTowerFingerStateT getTowerFingersState(void);

    void stopAccumulator(void );
    void assignAccumButtons(WsControllerButton* p_in, WsControllerButton* p_out,
        WsControllerButton* p_barRaise);
    void assignKickerButtons(WsControllerButton* p_prepKick, WsControllerButton* p_stow,
        WsControllerButton* p_kickHigh, WsControllerButton* p_kickLow,
        WsControllerButton* p_kickBaby, WsControllerButton* p_kickBabyHigh,
        WsControllerButton* p_rangeNear, WsControllerButton* p_rangeFar);
    void assignHangerInputs(WsControllerButton* p_releaseArmsButton,
                            WsControllerButton* p_releaseTowerAlignButton,
                            WsControllerButton* p_toggleTowerFingersButton,
                            WsControllerButton* p_winchSlowSafetyButton,
                            WsControllerButton* p_winchFullSafetyButton,
                            WsControllerAxis* p_winchDriveAxis);
protected:
    WsControllerButton* ap_accumInButton;         /*!< The input that represents the desire to accumulate in */
    WsControllerButton* ap_accumOutButton;        /*!< The input that represents the desire to accumulate out */
    WsControllerButton* ap_accumBarRaiseButton;        /*!< The input that represents the desire to turn the accumulator off */
    WsControllerButton* ap_prepareKickerButton;   /*!< The input that represents the desire to prepare the kicker */
    WsControllerButton* ap_stowKickerButton;      /*!< The input that represents the desire to move the kicker to the stow state */
    WsControllerButton* ap_kickHighButton;        /*!< The input that represents the desire to kick high */
    WsControllerButton* ap_kickLowButton;         /*!< The input that represents the desire to kick low */
    WsControllerButton* ap_kickBabyButton;        /*!< The input that represents the desire to kick really short */
    WsControllerButton* ap_kickBabyHighButton;        /*!< The input that represents the desire to kick really short */
    WsControllerButton* ap_kickRangeNearButton;   /*!< The input that represents the desire to set the kick range to near */
    WsControllerButton* ap_kickRangeFarButton;    /*!< The input that represents the desire to set the kick range to far */

    WsControllerButton* ap_releaseArmsButton;         /*!< The input that represents the desire to release the arms */
    WsControllerButton* ap_releaseTowerAlignButton;   /*!< The input that represents the desire to release the tower align */
    WsControllerButton* ap_toggleTowerFingersButton;  /*!< The input that represents the desire to toggle the tower finger state */
    WsControllerButton* ap_winchSlowSafetyButton;     /*!< The input that represents the desire to run the winch at slow speed (in conjunction with the winchDriveAxis) */
    WsControllerButton* ap_winchFullSafetyButton;     /*!< The input that represents the desire to run the winch at full speed (in conjunction with the winchDriveAxis) */
    WsControllerAxis* ap_winchDriveAxis;              /*!< The input that represents the desire to drive the winch when one of the safety buttons is pressed*/

    WsAccumulator::WsAccumStateT a_accumState;
    WsAccumulator::WsBarStateT a_accumBarState;
};

#endif  //_WSAPPENDAGECONTROL_H
