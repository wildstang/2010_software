//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsAutoProgramBase.h
//  @ Date : 2/8/2009
//  @ Author : 
//
//


#if !defined(_WSAUTOPROGRAMBASE_H)
#define _WSAUTOPROGRAMBASE_H

#include <stdio.h>

class WsDriveVector;
class WsDriveBaseCrabSingle;
class WsKicker;
class WsDashboard;
class WsPid;
class Timer;

#include "WsKickerRange.h"
#include "WsKickerLoft.h"
#include "WsAccumulator.h"
#include "WsDriveBase.h"

/**
* This base class is used by all autonomous programs.  It contains general common
* building blocks that inheriting classes can use.
*/

class WsAutoProgramBase
{
public:
    typedef enum
    {
        DELAY_NONE,
        DELAY_1,
        DELAY_2,
    } StartDelayT;

    static float convertDelay(StartDelayT delay);

    WsAutoProgramBase();
    virtual ~WsAutoProgramBase();
    virtual bool run(void );
    /**
    * A purely virtual function that children will use to initialize their parameters
    */
    virtual void initParams(void) = 0;
    void assignDriveBase(WsDriveBaseCrabSingle* p_driveBase);
    void assignAppendages( WsKicker* p_kicker, WsAccumulator* p_accumulator);
    void setStartDelay(StartDelayT delay);
    void setPresetWheels(bool presetWheels);
    void turnOffDriveBase(void );
    void turnOffAppendages(void );
    void turnOffKicker(void );
    void turnOffAccumulator(void );
    bool delay(double delayTime, double* p_currentTime, bool forceStop = false);
    void setCrabEnableState(bool enabled);
    void setDrive(WsDriveVector* p_driveVector, float crabAngle);
    bool driveByTime(WsDriveVector* p_driveVector,
                     float crabAngle,
                     double driveTime,
                     double* p_currentTime);
    bool coastPointWheels(float crabAngle,
                          double delayTime,
                          double* p_currentTime);
    bool driveByEncoder(WsDriveVector* p_driveVector,
                        float crabAngle,
                        WsDriveBase::EncoderLocationT encoderLoc,
                        INT32 encoderTarget,
                        double timeout,
                        double* p_currentTime,
                        bool reinit = false);
    bool driveByDistancePid(WsDriveVector* p_driveVector,
                        float crabAngle,
                        WsDriveBase::EncoderLocationT encoderLoc,
                        INT32 encoderTarget,
                        WsPid* p_pid,
                        double timeout,
                        double* p_currentTime,
                        bool reinit = false);

    bool driveUntilPress(WsDriveVector* p_driveVector,
                        float crabAngle,
                        double timeout,
                        double* p_currentTime,
                        bool reinit = false);

    /*** 2010 specific actions ***/
    bool stowKicker(void);
    bool loadKicker(WsKickerRange::WsKickerRangeT range);
    bool setKickerRange(WsKickerRange::WsKickerRangeT range);
    bool babyKick(WsKickerLoft::WsKickerLoftT loft);
    bool kick(WsKickerLoft::WsKickerLoftT loft,
              bool lastKick,
              WsKickerRange::WsKickerRangeT nextRange);

    bool kickAndReload(WsKickerLoft::WsKickerLoftT loft, WsKickerRange::WsKickerRangeT reloadRange);
    bool setAccumState(WsAccumulator::WsAccumStateT state, WsAccumulator::WsBarStateT barState);



protected:
    WsDriveBaseCrabSingle* ap_driveBase;  /*!< The drive base to control */
    WsKicker* ap_kicker;
    WsAccumulator* ap_accumulator;
    WsDashboard* ap_dashboard;            /*!< The dashboard to send updates to */
    Timer* ap_timer;                      /*!< A timer to be used as needed*/
    bool a_timerStartFlag;                /*!< A flag to denote whether the timer needs to be restarted */
    StartDelayT a_startDelay;             /*!< How long to delay the start of the program */
    bool a_presetWheels;
    bool a_crabEnable;
};

#endif  //_WSAUTOPROGRAMBASE_H
